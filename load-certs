#!/bin/sh
PROG=load-certs
DESC="Load TLS certificates for a Docker container"
USAGE1="$PROG indir tlsdir"
USAGE2="$PROG -h|--help"
HELP_TEXT="
        Install TLS key and certificate files to an appropriate location if and
        only if the TLS_CERT_NAME parameter is set (see the \"parmdb\" script).

        The script takes two arguments: an input directory name and an output
        directory name. The input directory will be searched for any .key,
        .crt, .CA.crt, or .bundle.pem files having a basename that matches
        \$TLS_CERT_NAME. If a .bundle.pem file is found and there is no
        corresponding .crt and .CA.crt file, the cert files will be extracted
        from the .bundle.pem.

        The output directory will be created if necessary, as well as \"certs/\"
        and \"private/\" subdirectories.

        If no .key file can be found but the TLS_PRIVATE_KEY parameter is set,
        a .key file will be created with the value of \$TLS_PRIVATE_KEY as its
        contents.

ENVIRONMENT
        PARM_DB
          The directory containing the parmdb \"object database\". This is
          required.
"
USAGE="Usage:
  $USAGE1
  $USAGE2
"

case $1 in
    -h|--help)
        cat <<EOF
NAME
        $PROG - $DESC

SYNOPSIS
        $USAGE1
        $USAGE2

DESCRIPTION$HELP_TEXT
EOF
        exit 1 ;;

    -*)
        echo "$PROG: invalid option: $arg" >&2
        echo "$USAGE" >&2
        exit 1 ;;
esac

if [ $# != 2 ] ; then
    echo "$PROG: expecting two arguments" >&2
    echo "$USAGE" >&2
    exit 1
fi

if [ ":$PARM_DB" = : ] ; then
    echo "$PROG: PARM_DB environment variable must be set" >&2
    exit 1
fi

TLS_CERT_NAME=`parmdb --get=TLS_CERT_NAME`
TLS_PRIVATE_KEY=`parmdb --get=TLS_PRIVATE_KEY`

if [ ":$TLS_CERT_NAME" = ":" ] ; then
    exit 0
fi

indir="$1"
outdir="$2"
if [ ! -d "${indir}" ] ; then
    echo "$PROG: $indir: no such directory" >&2
    exit 1
fi
mkdir -p "${outdir}" "${outdir}/certs" "${outdir}/private" || exit 1
chmod go-w "${outdir}/private" || exit 1

key=`find "${indir}" -type f -name "${TLS_CERT_NAME}.key" -print | tail -1`
crt=`find "${indir}" -type f -name "${TLS_CERT_NAME}.crt" -print |
 grep -v '\.CA\.crt$' | tail -1`
cacrt=`find "${indir}" -type f -name "${TLS_CERT_NAME}.CA.crt" -print |
 tail -1`
pem=`find "${indir}" -type f -name "${TLS_CERT_NAME}.bundle.pem" -print |
 tail -1`

if [ ":$crt" != ":" ] && [ ":$cacrt" != ":" ] ; then
    cp "${crt}" "$cacrt" "${outdir}/certs" || exit 1
elif [ ":$pem" != ":" ] ; then
    crtline=`grep -n '^-----BEGIN CERTIFICATE-----' "${pem}" | sed -e 's/:.*//' | tail -1`
    if [ ":$crtline" = ":" ] || [ ":$crtline" = ":1" ] ; then
        echo "$PROG: ${pem}: unexpected format" >&2
        exit 1
    fi
    lastCAline=`expr $crtline - 1`
    sed -n -e "1,${lastCAline}p" "${pem}" >"${outdir}/certs/${TLS_CERT_NAME}.CA.crt" || exit 1
    sed -n -e "${crtline},\$p" "${pem}" >"${outdir}/certs/${TLS_CERT_NAME}.crt" || exit 1
else
    exit 0
fi

touch "${outdir}/private/${TLS_CERT_NAME}.key" || exit 1
chmod 600 "${outdir}/private/${TLS_CERT_NAME}.key" || exit 1
if [ ":$key" != ":" ] ; then
    cp "${key}" "${outdir}/private/${TLS_CERT_NAME}.key" || exit 1
elif [ ":$TLS_PRIVATE_KEY" != : ] ; then
    echo "$TLS_PRIVATE_KEY" >"${outdir}/private/${TLS_CERT_NAME}.key" || exit 1
fi

exit 0    
